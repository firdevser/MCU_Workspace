
LED_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003994  08003994  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003994  08003994  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003994  08003994  00013994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800399c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000100  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000010c  2000010c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000af94  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001713  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007d8  00000000  00000000  0002c6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000750  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa0f  00000000  00000000  0002d610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb3a  00000000  00000000  0004d01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5230  00000000  00000000  00058b59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011dd89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f48  00000000  00000000  0011dddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003944 	.word	0x08003944

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003944 	.word	0x08003944

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 faa0 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f836 	bl	800024c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f924 	bl	800042c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001e4:	f000 f8f2 	bl	80003cc <MX_USART2_UART_Init>
  MX_ADC4_Init();
 80001e8:	f000 f892 	bl	8000310 <MX_ADC4_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  a = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 80001ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f0:	4812      	ldr	r0, [pc, #72]	; (800023c <main+0x68>)
 80001f2:	f001 fab5 	bl	8001760 <HAL_GPIO_ReadPin>
 80001f6:	4603      	mov	r3, r0
 80001f8:	461a      	mov	r2, r3
 80001fa:	4b11      	ldr	r3, [pc, #68]	; (8000240 <main+0x6c>)
 80001fc:	601a      	str	r2, [r3, #0]
		  if (a == 0){
 80001fe:	4b10      	ldr	r3, [pc, #64]	; (8000240 <main+0x6c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d1f2      	bne.n	80001ec <main+0x18>

			  if(HAL_GetTick() - initT >= 300){
 8000206:	f000 fae3 	bl	80007d0 <HAL_GetTick>
 800020a:	4603      	mov	r3, r0
 800020c:	4a0d      	ldr	r2, [pc, #52]	; (8000244 <main+0x70>)
 800020e:	6812      	ldr	r2, [r2, #0]
 8000210:	1a9b      	subs	r3, r3, r2
 8000212:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000216:	d3e9      	bcc.n	80001ec <main+0x18>
			  		  initT = HAL_GetTick();
 8000218:	f000 fada 	bl	80007d0 <HAL_GetTick>
 800021c:	4603      	mov	r3, r0
 800021e:	461a      	mov	r2, r3
 8000220:	4b08      	ldr	r3, [pc, #32]	; (8000244 <main+0x70>)
 8000222:	601a      	str	r2, [r3, #0]
			  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000224:	2120      	movs	r1, #32
 8000226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800022a:	f001 fac9 	bl	80017c0 <HAL_GPIO_TogglePin>
					  counter++;
 800022e:	4b06      	ldr	r3, [pc, #24]	; (8000248 <main+0x74>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	3301      	adds	r3, #1
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <main+0x74>)
 8000236:	6013      	str	r3, [r2, #0]
		  a = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000238:	e7d8      	b.n	80001ec <main+0x18>
 800023a:	bf00      	nop
 800023c:	48000800 	.word	0x48000800
 8000240:	20000104 	.word	0x20000104
 8000244:	20000100 	.word	0x20000100
 8000248:	200000fc 	.word	0x200000fc

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b0a6      	sub	sp, #152	; 0x98
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000256:	2228      	movs	r2, #40	; 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f003 fb6a 	bl	8003934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000264:	2200      	movs	r2, #0
 8000266:	601a      	str	r2, [r3, #0]
 8000268:	605a      	str	r2, [r3, #4]
 800026a:	609a      	str	r2, [r3, #8]
 800026c:	60da      	str	r2, [r3, #12]
 800026e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2258      	movs	r2, #88	; 0x58
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fb5c 	bl	8003934 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	2302      	movs	r3, #2
 800027e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000284:	2310      	movs	r3, #16
 8000286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800028a:	2302      	movs	r3, #2
 800028c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000294:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000298:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800029c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002aa:	4618      	mov	r0, r3
 80002ac:	f001 faa2 	bl	80017f4 <HAL_RCC_OscConfig>
 80002b0:	4603      	mov	r3, r0
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d001      	beq.n	80002ba <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002b6:	f000 f91f 	bl	80004f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ba:	230f      	movs	r3, #15
 80002bc:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002be:	2302      	movs	r3, #2
 80002c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002cc:	2300      	movs	r3, #0
 80002ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002d4:	2102      	movs	r1, #2
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fae0 	bl	800289c <HAL_RCC_ClockConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002e2:	f000 f909 	bl	80004f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC34;
 80002e6:	f44f 7381 	mov.w	r3, #258	; 0x102
 80002ea:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80002f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	4618      	mov	r0, r3
 80002fa:	f002 fd05 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000304:	f000 f8f8 	bl	80004f8 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3798      	adds	r7, #152	; 0x98
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000316:	463b      	mov	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
 800031c:	605a      	str	r2, [r3, #4]
 800031e:	609a      	str	r2, [r3, #8]
 8000320:	60da      	str	r2, [r3, #12]
 8000322:	611a      	str	r2, [r3, #16]
 8000324:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000328:	4a27      	ldr	r2, [pc, #156]	; (80003c8 <MX_ADC4_Init+0xb8>)
 800032a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800032c:	4b25      	ldr	r3, [pc, #148]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800032e:	2200      	movs	r2, #0
 8000330:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000332:	4b24      	ldr	r3, [pc, #144]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000334:	2200      	movs	r2, #0
 8000336:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000338:	4b22      	ldr	r3, [pc, #136]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800033a:	2200      	movs	r2, #0
 800033c:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800033e:	4b21      	ldr	r3, [pc, #132]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000340:	2201      	movs	r2, #1
 8000342:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000346:	2200      	movs	r2, #0
 8000348:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800034c:	4b1d      	ldr	r3, [pc, #116]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800034e:	2200      	movs	r2, #0
 8000350:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000352:	4b1c      	ldr	r3, [pc, #112]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000354:	2201      	movs	r2, #1
 8000356:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000358:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000360:	2201      	movs	r2, #1
 8000362:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000366:	2200      	movs	r2, #0
 8000368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800036e:	2204      	movs	r2, #4
 8000370:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000374:	2200      	movs	r2, #0
 8000376:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_ADC4_Init+0xb4>)
 800037a:	2200      	movs	r2, #0
 800037c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800037e:	4811      	ldr	r0, [pc, #68]	; (80003c4 <MX_ADC4_Init+0xb4>)
 8000380:	f000 fa32 	bl	80007e8 <HAL_ADC_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 800038a:	f000 f8b5 	bl	80004f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800038e:	2303      	movs	r3, #3
 8000390:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000392:	2301      	movs	r3, #1
 8000394:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000396:	2300      	movs	r3, #0
 8000398:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800039a:	2300      	movs	r3, #0
 800039c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800039e:	2300      	movs	r3, #0
 80003a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80003a6:	463b      	mov	r3, r7
 80003a8:	4619      	mov	r1, r3
 80003aa:	4806      	ldr	r0, [pc, #24]	; (80003c4 <MX_ADC4_Init+0xb4>)
 80003ac:	f000 fc16 	bl	8000bdc <HAL_ADC_ConfigChannel>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 80003b6:	f000 f89f 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	3718      	adds	r7, #24
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	20000028 	.word	0x20000028
 80003c8:	50000500 	.word	0x50000500

080003cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003d0:	4b14      	ldr	r3, [pc, #80]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003d2:	4a15      	ldr	r2, [pc, #84]	; (8000428 <MX_USART2_UART_Init+0x5c>)
 80003d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003d6:	4b13      	ldr	r3, [pc, #76]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003d8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003de:	4b11      	ldr	r3, [pc, #68]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003f2:	220c      	movs	r2, #12
 80003f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_USART2_UART_Init+0x58>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_USART2_UART_Init+0x58>)
 800040a:	2200      	movs	r2, #0
 800040c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_USART2_UART_Init+0x58>)
 8000410:	f002 fe98 	bl	8003144 <HAL_UART_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800041a:	f000 f86d 	bl	80004f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000078 	.word	0x20000078
 8000428:	40004400 	.word	0x40004400

0800042c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b08a      	sub	sp, #40	; 0x28
 8000430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]
 800043c:	609a      	str	r2, [r3, #8]
 800043e:	60da      	str	r2, [r3, #12]
 8000440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000442:	4b2b      	ldr	r3, [pc, #172]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000444:	695b      	ldr	r3, [r3, #20]
 8000446:	4a2a      	ldr	r2, [pc, #168]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000448:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800044c:	6153      	str	r3, [r2, #20]
 800044e:	4b28      	ldr	r3, [pc, #160]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <MX_GPIO_Init+0xc4>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a24      	ldr	r2, [pc, #144]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000460:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b22      	ldr	r3, [pc, #136]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b1f      	ldr	r3, [pc, #124]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a1e      	ldr	r2, [pc, #120]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000480:	695b      	ldr	r3, [r3, #20]
 8000482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <MX_GPIO_Init+0xc4>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	4a18      	ldr	r2, [pc, #96]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000494:	6153      	str	r3, [r2, #20]
 8000496:	4b16      	ldr	r3, [pc, #88]	; (80004f0 <MX_GPIO_Init+0xc4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004a2:	2200      	movs	r2, #0
 80004a4:	2120      	movs	r1, #32
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f001 f971 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80004ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	4619      	mov	r1, r3
 80004c2:	480c      	ldr	r0, [pc, #48]	; (80004f4 <MX_GPIO_Init+0xc8>)
 80004c4:	f000 ffc2 	bl	800144c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004c8:	2320      	movs	r3, #32
 80004ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004cc:	2301      	movs	r3, #1
 80004ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	2300      	movs	r3, #0
 80004d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d4:	2300      	movs	r3, #0
 80004d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f000 ffb3 	bl	800144c <HAL_GPIO_Init>

}
 80004e6:	bf00      	nop
 80004e8:	3728      	adds	r7, #40	; 0x28
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000800 	.word	0x48000800

080004f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fc:	b672      	cpsid	i
}
 80004fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000500:	e7fe      	b.n	8000500 <Error_Handler+0x8>
	...

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <HAL_MspInit+0x44>)
 800050c:	699b      	ldr	r3, [r3, #24]
 800050e:	4a0e      	ldr	r2, [pc, #56]	; (8000548 <HAL_MspInit+0x44>)
 8000510:	f043 0301 	orr.w	r3, r3, #1
 8000514:	6193      	str	r3, [r2, #24]
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	f003 0301 	and.w	r3, r3, #1
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <HAL_MspInit+0x44>)
 8000524:	69db      	ldr	r3, [r3, #28]
 8000526:	4a08      	ldr	r2, [pc, #32]	; (8000548 <HAL_MspInit+0x44>)
 8000528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052c:	61d3      	str	r3, [r2, #28]
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000536:	603b      	str	r3, [r7, #0]
 8000538:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800053a:	2007      	movs	r0, #7
 800053c:	f000 ff52 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000554:	f107 0314 	add.w	r3, r7, #20
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC4)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a15      	ldr	r2, [pc, #84]	; (80005c0 <HAL_ADC_MspInit+0x74>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d124      	bne.n	80005b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC4_MspInit 0 */

  /* USER CODE END ADC4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC34_CLK_ENABLE();
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 8000574:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 800058c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_ADC_MspInit+0x78>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
    /**ADC4 GPIO Configuration
    PB12     ------> ADC4_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a4:	2303      	movs	r3, #3
 80005a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	4619      	mov	r1, r3
 80005b2:	4805      	ldr	r0, [pc, #20]	; (80005c8 <HAL_ADC_MspInit+0x7c>)
 80005b4:	f000 ff4a 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80005b8:	bf00      	nop
 80005ba:	3728      	adds	r7, #40	; 0x28
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	50000500 	.word	0x50000500
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000400 	.word	0x48000400

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x7c>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d128      	bne.n	8000640 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ee:	4b17      	ldr	r3, [pc, #92]	; (800064c <HAL_UART_MspInit+0x80>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a16      	ldr	r2, [pc, #88]	; (800064c <HAL_UART_MspInit+0x80>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b14      	ldr	r3, [pc, #80]	; (800064c <HAL_UART_MspInit+0x80>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <HAL_UART_MspInit+0x80>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a10      	ldr	r2, [pc, #64]	; (800064c <HAL_UART_MspInit+0x80>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_UART_MspInit+0x80>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800061e:	230c      	movs	r3, #12
 8000620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800062e:	2307      	movs	r3, #7
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800063c:	f000 ff06 	bl	800144c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000640:	bf00      	nop
 8000642:	3728      	adds	r7, #40	; 0x28
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000660:	e7fe      	b.n	8000660 <MemManage_Handler+0x4>

08000662 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000666:	e7fe      	b.n	8000666 <BusFault_Handler+0x4>

08000668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800066c:	e7fe      	b.n	800066c <UsageFault_Handler+0x4>

0800066e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr

0800067c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800069c:	f000 f884 	bl	80007a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <SystemInit+0x20>)
 80006aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006ae:	4a05      	ldr	r2, [pc, #20]	; (80006c4 <SystemInit+0x20>)
 80006b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006cc:	480d      	ldr	r0, [pc, #52]	; (8000704 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ce:	490e      	ldr	r1, [pc, #56]	; (8000708 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <LoopForever+0xe>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d4:	e002      	b.n	80006dc <LoopCopyDataInit>

080006d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006da:	3304      	adds	r3, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e0:	d3f9      	bcc.n	80006d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e2:	4a0b      	ldr	r2, [pc, #44]	; (8000710 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e4:	4c0b      	ldr	r4, [pc, #44]	; (8000714 <LoopForever+0x16>)
  movs r3, #0
 80006e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006e8:	e001      	b.n	80006ee <LoopFillZerobss>

080006ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ec:	3204      	adds	r2, #4

080006ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f0:	d3fb      	bcc.n	80006ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006f2:	f7ff ffd7 	bl	80006a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006f6:	f003 f8f9 	bl	80038ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fd6b 	bl	80001d4 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000700:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000704:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000708:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800070c:	0800399c 	.word	0x0800399c
  ldr r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000714:	2000010c 	.word	0x2000010c

08000718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_2_IRQHandler>
	...

0800071c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b08      	ldr	r3, [pc, #32]	; (8000744 <HAL_Init+0x28>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a07      	ldr	r2, [pc, #28]	; (8000744 <HAL_Init+0x28>)
 8000726:	f043 0310 	orr.w	r3, r3, #16
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 fe59 	bl	80013e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000732:	2000      	movs	r0, #0
 8000734:	f000 f808 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000738:	f7ff fee4 	bl	8000504 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <HAL_InitTick+0x54>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_InitTick+0x58>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4619      	mov	r1, r3
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000762:	fbb2 f3f3 	udiv	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	f000 fe63 	bl	8001432 <HAL_SYSTICK_Config>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
 8000774:	e00e      	b.n	8000794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d80a      	bhi.n	8000792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800077c:	2200      	movs	r2, #0
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	f04f 30ff 	mov.w	r0, #4294967295
 8000784:	f000 fe39 	bl	80013fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <HAL_InitTick+0x5c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800078e:	2300      	movs	r3, #0
 8000790:	e000      	b.n	8000794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
}
 8000794:	4618      	mov	r0, r3
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000000 	.word	0x20000000
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000004 	.word	0x20000004

080007a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <HAL_IncTick+0x20>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x24>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	4413      	add	r3, r2
 80007b8:	4a04      	ldr	r2, [pc, #16]	; (80007cc <HAL_IncTick+0x24>)
 80007ba:	6013      	str	r3, [r2, #0]
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	20000008 	.word	0x20000008
 80007cc:	20000108 	.word	0x20000108

080007d0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return uwTick;  
 80007d4:	4b03      	ldr	r3, [pc, #12]	; (80007e4 <HAL_GetTick+0x14>)
 80007d6:	681b      	ldr	r3, [r3, #0]
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	20000108 	.word	0x20000108

080007e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09a      	sub	sp, #104	; 0x68
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80007f6:	2300      	movs	r3, #0
 80007f8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	e1e3      	b.n	8000bd0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691b      	ldr	r3, [r3, #16]
 800080c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	2b00      	cmp	r3, #0
 8000818:	d176      	bne.n	8000908 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	2b00      	cmp	r3, #0
 8000820:	d152      	bne.n	80008c8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	2200      	movs	r2, #0
 8000832:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2200      	movs	r2, #0
 8000838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800083c:	6878      	ldr	r0, [r7, #4]
 800083e:	f7ff fe85 	bl	800054c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084c:	2b00      	cmp	r3, #0
 800084e:	d13b      	bne.n	80008c8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f000 fcaf 	bl	80011b4 <ADC_Disable>
 8000856:	4603      	mov	r3, r0
 8000858:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000860:	f003 0310 	and.w	r3, r3, #16
 8000864:	2b00      	cmp	r3, #0
 8000866:	d12f      	bne.n	80008c8 <HAL_ADC_Init+0xe0>
 8000868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800086c:	2b00      	cmp	r3, #0
 800086e:	d12b      	bne.n	80008c8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000878:	f023 0302 	bic.w	r3, r3, #2
 800087c:	f043 0202 	orr.w	r2, r3, #2
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000892:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008a2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008a4:	4b92      	ldr	r3, [pc, #584]	; (8000af0 <HAL_ADC_Init+0x308>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a92      	ldr	r2, [pc, #584]	; (8000af4 <HAL_ADC_Init+0x30c>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	0c9a      	lsrs	r2, r3, #18
 80008b0:	4613      	mov	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008ba:	e002      	b.n	80008c2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	3b01      	subs	r3, #1
 80008c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1f9      	bne.n	80008bc <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d007      	beq.n	80008e6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80008e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80008e4:	d110      	bne.n	8000908 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	f023 0312 	bic.w	r3, r3, #18
 80008ee:	f043 0210 	orr.w	r2, r3, #16
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f043 0201 	orr.w	r2, r3, #1
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000902:	2301      	movs	r3, #1
 8000904:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090c:	f003 0310 	and.w	r3, r3, #16
 8000910:	2b00      	cmp	r3, #0
 8000912:	f040 8150 	bne.w	8000bb6 <HAL_ADC_Init+0x3ce>
 8000916:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800091a:	2b00      	cmp	r3, #0
 800091c:	f040 814b 	bne.w	8000bb6 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800092a:	2b00      	cmp	r3, #0
 800092c:	f040 8143 	bne.w	8000bb6 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000938:	f043 0202 	orr.w	r2, r3, #2
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000948:	d004      	beq.n	8000954 <HAL_ADC_Init+0x16c>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_Init+0x310>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d101      	bne.n	8000958 <HAL_ADC_Init+0x170>
 8000954:	4b69      	ldr	r3, [pc, #420]	; (8000afc <HAL_ADC_Init+0x314>)
 8000956:	e000      	b.n	800095a <HAL_ADC_Init+0x172>
 8000958:	4b69      	ldr	r3, [pc, #420]	; (8000b00 <HAL_ADC_Init+0x318>)
 800095a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000964:	d102      	bne.n	800096c <HAL_ADC_Init+0x184>
 8000966:	4b64      	ldr	r3, [pc, #400]	; (8000af8 <HAL_ADC_Init+0x310>)
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	e01a      	b.n	80009a2 <HAL_ADC_Init+0x1ba>
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a61      	ldr	r2, [pc, #388]	; (8000af8 <HAL_ADC_Init+0x310>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d103      	bne.n	800097e <HAL_ADC_Init+0x196>
 8000976:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e011      	b.n	80009a2 <HAL_ADC_Init+0x1ba>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a60      	ldr	r2, [pc, #384]	; (8000b04 <HAL_ADC_Init+0x31c>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d102      	bne.n	800098e <HAL_ADC_Init+0x1a6>
 8000988:	4b5f      	ldr	r3, [pc, #380]	; (8000b08 <HAL_ADC_Init+0x320>)
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e009      	b.n	80009a2 <HAL_ADC_Init+0x1ba>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a5d      	ldr	r2, [pc, #372]	; (8000b08 <HAL_ADC_Init+0x320>)
 8000994:	4293      	cmp	r3, r2
 8000996:	d102      	bne.n	800099e <HAL_ADC_Init+0x1b6>
 8000998:	4b5a      	ldr	r3, [pc, #360]	; (8000b04 <HAL_ADC_Init+0x31c>)
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e001      	b.n	80009a2 <HAL_ADC_Init+0x1ba>
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	f003 0303 	and.w	r3, r3, #3
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d108      	bne.n	80009c2 <HAL_ADC_Init+0x1da>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d101      	bne.n	80009c2 <HAL_ADC_Init+0x1da>
 80009be:	2301      	movs	r3, #1
 80009c0:	e000      	b.n	80009c4 <HAL_ADC_Init+0x1dc>
 80009c2:	2300      	movs	r3, #0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d11c      	bne.n	8000a02 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009c8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d010      	beq.n	80009f0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d107      	bne.n	80009ea <HAL_ADC_Init+0x202>
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d101      	bne.n	80009ea <HAL_ADC_Init+0x202>
 80009e6:	2301      	movs	r3, #1
 80009e8:	e000      	b.n	80009ec <HAL_ADC_Init+0x204>
 80009ea:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d108      	bne.n	8000a02 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80009f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	431a      	orrs	r2, r3
 80009fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000a00:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	7e5b      	ldrb	r3, [r3, #25]
 8000a06:	035b      	lsls	r3, r3, #13
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d002      	beq.n	8000a16 <HAL_ADC_Init+0x22e>
 8000a10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a14:	e000      	b.n	8000a18 <HAL_ADC_Init+0x230>
 8000a16:	2200      	movs	r2, #0
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	431a      	orrs	r2, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a32:	2b01      	cmp	r3, #1
 8000a34:	d11b      	bne.n	8000a6e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	7e5b      	ldrb	r3, [r3, #25]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d109      	bne.n	8000a52 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a42:	3b01      	subs	r3, #1
 8000a44:	045a      	lsls	r2, r3, #17
 8000a46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8000a50:	e00d      	b.n	8000a6e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000a5a:	f043 0220 	orr.w	r2, r3, #32
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	f043 0201 	orr.w	r2, r3, #1
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d054      	beq.n	8000b20 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <HAL_ADC_Init+0x31c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d004      	beq.n	8000a8a <HAL_ADC_Init+0x2a2>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <HAL_ADC_Init+0x320>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d140      	bne.n	8000b0c <HAL_ADC_Init+0x324>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a8e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8000a92:	d02a      	beq.n	8000aea <HAL_ADC_Init+0x302>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a9c:	d022      	beq.n	8000ae4 <HAL_ADC_Init+0x2fc>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa2:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8000aa6:	d01a      	beq.n	8000ade <HAL_ADC_Init+0x2f6>
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aac:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8000ab0:	d012      	beq.n	8000ad8 <HAL_ADC_Init+0x2f0>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab6:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8000aba:	d00a      	beq.n	8000ad2 <HAL_ADC_Init+0x2ea>
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8000ac4:	d002      	beq.n	8000acc <HAL_ADC_Init+0x2e4>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aca:	e023      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000acc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ad0:	e020      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000ad2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ad6:	e01d      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000ad8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000adc:	e01a      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ae2:	e017      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000ae4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000ae8:	e014      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000aea:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000aee:	e011      	b.n	8000b14 <HAL_ADC_Init+0x32c>
 8000af0:	20000000 	.word	0x20000000
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	50000100 	.word	0x50000100
 8000afc:	50000300 	.word	0x50000300
 8000b00:	50000700 	.word	0x50000700
 8000b04:	50000400 	.word	0x50000400
 8000b08:	50000500 	.word	0x50000500
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d114      	bne.n	8000b58 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	6812      	ldr	r2, [r2, #0]
 8000b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000b3c:	f023 0302 	bic.w	r3, r3, #2
 8000b40:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7e1b      	ldrb	r3, [r3, #24]
 8000b46:	039a      	lsls	r2, r3, #14
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	4313      	orrs	r3, r2
 8000b52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b54:	4313      	orrs	r3, r2
 8000b56:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_ADC_Init+0x3f0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000b68:	430b      	orrs	r3, r1
 8000b6a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d10c      	bne.n	8000b8e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f023 010f 	bic.w	r1, r3, #15
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8c:	e007      	b.n	8000b9e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 020f 	bic.w	r2, r2, #15
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f023 0303 	bic.w	r3, r3, #3
 8000bac:	f043 0201 	orr.w	r2, r3, #1
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000bb4:	e00a      	b.n	8000bcc <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f023 0312 	bic.w	r3, r3, #18
 8000bbe:	f043 0210 	orr.w	r2, r3, #16
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000bcc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3768      	adds	r7, #104	; 0x68
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	fff0c007 	.word	0xfff0c007

08000bdc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b09b      	sub	sp, #108	; 0x6c
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d101      	bne.n	8000bfe <HAL_ADC_ConfigChannel+0x22>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e2ca      	b.n	8001194 <HAL_ADC_ConfigChannel+0x5b8>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2201      	movs	r2, #1
 8000c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	f040 82ae 	bne.w	8001172 <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b04      	cmp	r3, #4
 8000c1c:	d81c      	bhi.n	8000c58 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685a      	ldr	r2, [r3, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	461a      	mov	r2, r3
 8000c32:	231f      	movs	r3, #31
 8000c34:	4093      	lsls	r3, r2
 8000c36:	43db      	mvns	r3, r3
 8000c38:	4019      	ands	r1, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	6818      	ldr	r0, [r3, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685a      	ldr	r2, [r3, #4]
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	430a      	orrs	r2, r1
 8000c54:	631a      	str	r2, [r3, #48]	; 0x30
 8000c56:	e063      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b09      	cmp	r3, #9
 8000c5e:	d81e      	bhi.n	8000c9e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	3b1e      	subs	r3, #30
 8000c74:	221f      	movs	r2, #31
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43db      	mvns	r3, r3
 8000c7c:	4019      	ands	r1, r3
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	6818      	ldr	r0, [r3, #0]
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	3b1e      	subs	r3, #30
 8000c90:	fa00 f203 	lsl.w	r2, r0, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000c9c:	e040      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	2b0e      	cmp	r3, #14
 8000ca4:	d81e      	bhi.n	8000ce4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685a      	ldr	r2, [r3, #4]
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	3b3c      	subs	r3, #60	; 0x3c
 8000cba:	221f      	movs	r2, #31
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	4019      	ands	r1, r3
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4413      	add	r3, r2
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	3b3c      	subs	r3, #60	; 0x3c
 8000cd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	430a      	orrs	r2, r1
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce2:	e01d      	b.n	8000d20 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	4413      	add	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	3b5a      	subs	r3, #90	; 0x5a
 8000cf8:	221f      	movs	r2, #31
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4019      	ands	r1, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	6818      	ldr	r0, [r3, #0]
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	3b5a      	subs	r3, #90	; 0x5a
 8000d14:	fa00 f203 	lsl.w	r2, r0, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	f040 80e5 	bne.w	8000efa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b09      	cmp	r3, #9
 8000d36:	d91c      	bls.n	8000d72 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	6999      	ldr	r1, [r3, #24]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	3b1e      	subs	r3, #30
 8000d4a:	2207      	movs	r2, #7
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	4019      	ands	r1, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	6898      	ldr	r0, [r3, #8]
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	3b1e      	subs	r3, #30
 8000d64:	fa00 f203 	lsl.w	r2, r0, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	619a      	str	r2, [r3, #24]
 8000d70:	e019      	b.n	8000da6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6959      	ldr	r1, [r3, #20]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	2207      	movs	r2, #7
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4019      	ands	r1, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	6898      	ldr	r0, [r3, #8]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	695a      	ldr	r2, [r3, #20]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	2b03      	cmp	r3, #3
 8000dc6:	d84f      	bhi.n	8000e68 <HAL_ADC_ConfigChannel+0x28c>
 8000dc8:	a201      	add	r2, pc, #4	; (adr r2, 8000dd0 <HAL_ADC_ConfigChannel+0x1f4>)
 8000dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dce:	bf00      	nop
 8000dd0:	08000de1 	.word	0x08000de1
 8000dd4:	08000e03 	.word	0x08000e03
 8000dd8:	08000e25 	.word	0x08000e25
 8000ddc:	08000e47 	.word	0x08000e47
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000de6:	4b9a      	ldr	r3, [pc, #616]	; (8001050 <HAL_ADC_ConfigChannel+0x474>)
 8000de8:	4013      	ands	r3, r2
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	6812      	ldr	r2, [r2, #0]
 8000dee:	0691      	lsls	r1, r2, #26
 8000df0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000df2:	430a      	orrs	r2, r1
 8000df4:	431a      	orrs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dfe:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e00:	e07e      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e08:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_ADC_ConfigChannel+0x474>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	0691      	lsls	r1, r2, #26
 8000e12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e14:	430a      	orrs	r2, r1
 8000e16:	431a      	orrs	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e20:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e22:	e06d      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_ADC_ConfigChannel+0x474>)
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	683a      	ldr	r2, [r7, #0]
 8000e30:	6812      	ldr	r2, [r2, #0]
 8000e32:	0691      	lsls	r1, r2, #26
 8000e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e36:	430a      	orrs	r2, r1
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e42:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e44:	e05c      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e4c:	4b80      	ldr	r3, [pc, #512]	; (8001050 <HAL_ADC_ConfigChannel+0x474>)
 8000e4e:	4013      	ands	r3, r2
 8000e50:	683a      	ldr	r2, [r7, #0]
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	0691      	lsls	r1, r2, #26
 8000e56:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e64:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000e66:	e04b      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	069b      	lsls	r3, r3, #26
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d107      	bne.n	8000e8c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000e8a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	069b      	lsls	r3, r3, #26
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d107      	bne.n	8000eb0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000eae:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	069b      	lsls	r3, r3, #26
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d107      	bne.n	8000ed4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ed2:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000eda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	069b      	lsls	r3, r3, #26
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d10a      	bne.n	8000efe <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ef6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000ef8:	e001      	b.n	8000efe <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8000efa:	bf00      	nop
 8000efc:	e000      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x324>
      break;
 8000efe:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0303 	and.w	r3, r3, #3
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d108      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x344>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d101      	bne.n	8000f20 <HAL_ADC_ConfigChannel+0x344>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_ADC_ConfigChannel+0x346>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f040 8130 	bne.w	8001188 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d00f      	beq.n	8000f50 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	400a      	ands	r2, r1
 8000f4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000f4e:	e049      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	430a      	orrs	r2, r1
 8000f66:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2b09      	cmp	r3, #9
 8000f70:	d91c      	bls.n	8000fac <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6999      	ldr	r1, [r3, #24]
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4413      	add	r3, r2
 8000f82:	3b1b      	subs	r3, #27
 8000f84:	2207      	movs	r2, #7
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	4019      	ands	r1, r3
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	6898      	ldr	r0, [r3, #8]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	3b1b      	subs	r3, #27
 8000f9e:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	619a      	str	r2, [r3, #24]
 8000faa:	e01b      	b.n	8000fe4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	6959      	ldr	r1, [r3, #20]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	1c5a      	adds	r2, r3, #1
 8000fb8:	4613      	mov	r3, r2
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	2207      	movs	r2, #7
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	4019      	ands	r1, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6898      	ldr	r0, [r3, #8]
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	4413      	add	r3, r2
 8000fd8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000fec:	d004      	beq.n	8000ff8 <HAL_ADC_ConfigChannel+0x41c>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a18      	ldr	r2, [pc, #96]	; (8001054 <HAL_ADC_ConfigChannel+0x478>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x420>
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_ADC_ConfigChannel+0x47c>)
 8000ffa:	e000      	b.n	8000ffe <HAL_ADC_ConfigChannel+0x422>
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_ADC_ConfigChannel+0x480>)
 8000ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2b10      	cmp	r3, #16
 8001006:	d105      	bne.n	8001014 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001010:	2b00      	cmp	r3, #0
 8001012:	d015      	beq.n	8001040 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001018:	2b11      	cmp	r3, #17
 800101a:	d105      	bne.n	8001028 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800101c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800102c:	2b12      	cmp	r3, #18
 800102e:	f040 80ab 	bne.w	8001188 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80a4 	bne.w	8001188 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001048:	d10a      	bne.n	8001060 <HAL_ADC_ConfigChannel+0x484>
 800104a:	4b02      	ldr	r3, [pc, #8]	; (8001054 <HAL_ADC_ConfigChannel+0x478>)
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	e022      	b.n	8001096 <HAL_ADC_ConfigChannel+0x4ba>
 8001050:	83fff000 	.word	0x83fff000
 8001054:	50000100 	.word	0x50000100
 8001058:	50000300 	.word	0x50000300
 800105c:	50000700 	.word	0x50000700
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a4e      	ldr	r2, [pc, #312]	; (80011a0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d103      	bne.n	8001072 <HAL_ADC_ConfigChannel+0x496>
 800106a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e011      	b.n	8001096 <HAL_ADC_ConfigChannel+0x4ba>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a4b      	ldr	r2, [pc, #300]	; (80011a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d102      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x4a6>
 800107c:	4b4a      	ldr	r3, [pc, #296]	; (80011a8 <HAL_ADC_ConfigChannel+0x5cc>)
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	e009      	b.n	8001096 <HAL_ADC_ConfigChannel+0x4ba>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a48      	ldr	r2, [pc, #288]	; (80011a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d102      	bne.n	8001092 <HAL_ADC_ConfigChannel+0x4b6>
 800108c:	4b45      	ldr	r3, [pc, #276]	; (80011a4 <HAL_ADC_ConfigChannel+0x5c8>)
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	e001      	b.n	8001096 <HAL_ADC_ConfigChannel+0x4ba>
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x4da>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_ADC_ConfigChannel+0x4da>
 80010b2:	2301      	movs	r3, #1
 80010b4:	e000      	b.n	80010b8 <HAL_ADC_ConfigChannel+0x4dc>
 80010b6:	2300      	movs	r3, #0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d150      	bne.n	800115e <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d010      	beq.n	80010e4 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <HAL_ADC_ConfigChannel+0x502>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d101      	bne.n	80010de <HAL_ADC_ConfigChannel+0x502>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x504>
 80010de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d13c      	bne.n	800115e <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b10      	cmp	r3, #16
 80010ea:	d11d      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x54c>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010f4:	d118      	bne.n	8001128 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80010f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80010fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001100:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <HAL_ADC_ConfigChannel+0x5d0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2a      	ldr	r2, [pc, #168]	; (80011b0 <HAL_ADC_ConfigChannel+0x5d4>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	0c9a      	lsrs	r2, r3, #18
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001118:	e002      	b.n	8001120 <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3b01      	subs	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f9      	bne.n	800111a <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001126:	e02e      	b.n	8001186 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b11      	cmp	r3, #17
 800112e:	d10b      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x56c>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001138:	d106      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800113a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001144:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001146:	e01e      	b.n	8001186 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d11a      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001150:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800115c:	e013      	b.n	8001186 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	f043 0220 	orr.w	r2, r3, #32
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001170:	e00a      	b.n	8001188 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f043 0220 	orr.w	r2, r3, #32
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001184:	e000      	b.n	8001188 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001186:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001190:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001194:	4618      	mov	r0, r3
 8001196:	376c      	adds	r7, #108	; 0x6c
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	50000100 	.word	0x50000100
 80011a4:	50000400 	.word	0x50000400
 80011a8:	50000500 	.word	0x50000500
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d108      	bne.n	80011e0 <ADC_Disable+0x2c>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <ADC_Disable+0x2c>
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <ADC_Disable+0x2e>
 80011e0:	2300      	movs	r3, #0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d047      	beq.n	8001276 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 030d 	and.w	r3, r3, #13
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10f      	bne.n	8001214 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f042 0202 	orr.w	r2, r2, #2
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2203      	movs	r2, #3
 800120a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800120c:	f7ff fae0 	bl	80007d0 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001212:	e029      	b.n	8001268 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f043 0210 	orr.w	r2, r3, #16
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e023      	b.n	8001278 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001230:	f7ff face 	bl	80007d0 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d914      	bls.n	8001268 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10d      	bne.n	8001268 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e007      	b.n	8001278 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d0dc      	beq.n	8001230 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b01      	subs	r3, #1
 80013ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013b0:	d301      	bcc.n	80013b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00f      	b.n	80013d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <SysTick_Config+0x40>)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013be:	210f      	movs	r1, #15
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f7ff ff8e 	bl	80012e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <SysTick_Config+0x40>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <SysTick_Config+0x40>)
 80013d0:	2207      	movs	r2, #7
 80013d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	e000e010 	.word	0xe000e010

080013e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff47 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b086      	sub	sp, #24
 80013fe:	af00      	add	r7, sp, #0
 8001400:	4603      	mov	r3, r0
 8001402:	60b9      	str	r1, [r7, #8]
 8001404:	607a      	str	r2, [r7, #4]
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800140c:	f7ff ff5c 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 8001410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	68b9      	ldr	r1, [r7, #8]
 8001416:	6978      	ldr	r0, [r7, #20]
 8001418:	f7ff ff8e 	bl	8001338 <NVIC_EncodePriority>
 800141c:	4602      	mov	r2, r0
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4611      	mov	r1, r2
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff5d 	bl	80012e4 <__NVIC_SetPriority>
}
 800142a:	bf00      	nop
 800142c:	3718      	adds	r7, #24
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ffb0 	bl	80013a0 <SysTick_Config>
 8001440:	4603      	mov	r3, r0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e160      	b.n	800171e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 8152 	beq.w	8001718 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80ac 	beq.w	8001718 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b5e      	ldr	r3, [pc, #376]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a5d      	ldr	r2, [pc, #372]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b5b      	ldr	r3, [pc, #364]	; (800173c <HAL_GPIO_Init+0x2f0>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_GPIO_Init+0x2f4>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d025      	beq.n	8001650 <HAL_GPIO_Init+0x204>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_GPIO_Init+0x2f8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d01f      	beq.n	800164c <HAL_GPIO_Init+0x200>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_GPIO_Init+0x2fc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d019      	beq.n	8001648 <HAL_GPIO_Init+0x1fc>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4d      	ldr	r2, [pc, #308]	; (800174c <HAL_GPIO_Init+0x300>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d013      	beq.n	8001644 <HAL_GPIO_Init+0x1f8>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4c      	ldr	r2, [pc, #304]	; (8001750 <HAL_GPIO_Init+0x304>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d00d      	beq.n	8001640 <HAL_GPIO_Init+0x1f4>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4b      	ldr	r2, [pc, #300]	; (8001754 <HAL_GPIO_Init+0x308>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d007      	beq.n	800163c <HAL_GPIO_Init+0x1f0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a4a      	ldr	r2, [pc, #296]	; (8001758 <HAL_GPIO_Init+0x30c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d101      	bne.n	8001638 <HAL_GPIO_Init+0x1ec>
 8001634:	2306      	movs	r3, #6
 8001636:	e00c      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001638:	2307      	movs	r3, #7
 800163a:	e00a      	b.n	8001652 <HAL_GPIO_Init+0x206>
 800163c:	2305      	movs	r3, #5
 800163e:	e008      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001640:	2304      	movs	r3, #4
 8001642:	e006      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001644:	2303      	movs	r3, #3
 8001646:	e004      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001648:	2302      	movs	r3, #2
 800164a:	e002      	b.n	8001652 <HAL_GPIO_Init+0x206>
 800164c:	2301      	movs	r3, #1
 800164e:	e000      	b.n	8001652 <HAL_GPIO_Init+0x206>
 8001650:	2300      	movs	r3, #0
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	f002 0203 	and.w	r2, r2, #3
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	4093      	lsls	r3, r2
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001662:	4937      	ldr	r1, [pc, #220]	; (8001740 <HAL_GPIO_Init+0x2f4>)
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	089b      	lsrs	r3, r3, #2
 8001668:	3302      	adds	r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_GPIO_Init+0x310>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001694:	4a31      	ldr	r2, [pc, #196]	; (800175c <HAL_GPIO_Init+0x310>)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800169a:	4b30      	ldr	r3, [pc, #192]	; (800175c <HAL_GPIO_Init+0x310>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016be:	4a27      	ldr	r2, [pc, #156]	; (800175c <HAL_GPIO_Init+0x310>)
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016c4:	4b25      	ldr	r3, [pc, #148]	; (800175c <HAL_GPIO_Init+0x310>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016e8:	4a1c      	ldr	r2, [pc, #112]	; (800175c <HAL_GPIO_Init+0x310>)
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_GPIO_Init+0x310>)
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <HAL_GPIO_Init+0x310>)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	3301      	adds	r3, #1
 800171c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	f47f ae97 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	371c      	adds	r7, #28
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	40021000 	.word	0x40021000
 8001740:	40010000 	.word	0x40010000
 8001744:	48000400 	.word	0x48000400
 8001748:	48000800 	.word	0x48000800
 800174c:	48000c00 	.word	0x48000c00
 8001750:	48001000 	.word	0x48001000
 8001754:	48001400 	.word	0x48001400
 8001758:	48001800 	.word	0x48001800
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d002      	beq.n	800177e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
 800177c:	e001      	b.n	8001782 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001782:	7bfb      	ldrb	r3, [r7, #15]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3714      	adds	r7, #20
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017ae:	887a      	ldrh	r2, [r7, #2]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43d9      	mvns	r1, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	400b      	ands	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	619a      	str	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001800:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001804:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	f001 b83a 	b.w	800288e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 816f 	beq.w	8001b0e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001830:	4bb5      	ldr	r3, [pc, #724]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b04      	cmp	r3, #4
 800183a:	d00c      	beq.n	8001856 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183c:	4bb2      	ldr	r3, [pc, #712]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b08      	cmp	r3, #8
 8001846:	d15c      	bne.n	8001902 <HAL_RCC_OscConfig+0x10e>
 8001848:	4baf      	ldr	r3, [pc, #700]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d155      	bne.n	8001902 <HAL_RCC_OscConfig+0x10e>
 8001856:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800185a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800186a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	095b      	lsrs	r3, r3, #5
 8001876:	b2db      	uxtb	r3, r3
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <HAL_RCC_OscConfig+0x94>
 8001882:	4ba1      	ldr	r3, [pc, #644]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	e015      	b.n	80018b4 <HAL_RCC_OscConfig+0xc0>
 8001888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800189c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80018a4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80018a8:	fa93 f3a3 	rbit	r3, r3
 80018ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018b0:	4b95      	ldr	r3, [pc, #596]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b8:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80018bc:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80018c0:	fa92 f2a2 	rbit	r2, r2
 80018c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80018c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018cc:	fab2 f282 	clz	r2, r2
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	f042 0220 	orr.w	r2, r2, #32
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	f002 021f 	and.w	r2, r2, #31
 80018dc:	2101      	movs	r1, #1
 80018de:	fa01 f202 	lsl.w	r2, r1, r2
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8111 	beq.w	8001b0c <HAL_RCC_OscConfig+0x318>
 80018ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 8108 	bne.w	8001b0c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f000 bfc6 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001902:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001906:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001912:	d106      	bne.n	8001922 <HAL_RCC_OscConfig+0x12e>
 8001914:	4b7c      	ldr	r3, [pc, #496]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a7b      	ldr	r2, [pc, #492]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800191a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	e036      	b.n	8001990 <HAL_RCC_OscConfig+0x19c>
 8001922:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001926:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x158>
 8001932:	4b75      	ldr	r3, [pc, #468]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a74      	ldr	r2, [pc, #464]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e021      	b.n	8001990 <HAL_RCC_OscConfig+0x19c>
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x184>
 800195e:	4b6a      	ldr	r3, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a69      	ldr	r2, [pc, #420]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b67      	ldr	r3, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a66      	ldr	r2, [pc, #408]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	e00b      	b.n	8001990 <HAL_RCC_OscConfig+0x19c>
 8001978:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a62      	ldr	r2, [pc, #392]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800197e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	4b60      	ldr	r3, [pc, #384]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 800198a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001990:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001994:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d059      	beq.n	8001a54 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7fe ff16 	bl	80007d0 <HAL_GetTick>
 80019a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019aa:	f7fe ff11 	bl	80007d0 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d902      	bls.n	80019c0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f000 bf67 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 80019c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80019d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0x1fe>
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x22a>
 80019f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a0a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001a0e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001a12:	fa93 f3a3 	rbit	r3, r3
 8001a16:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a22:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001a26:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001a2a:	fa92 f2a2 	rbit	r2, r2
 8001a2e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001a32:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a36:	fab2 f282 	clz	r2, r2
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	f042 0220 	orr.w	r2, r2, #32
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	f002 021f 	and.w	r2, r2, #31
 8001a46:	2101      	movs	r1, #1
 8001a48:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0ab      	beq.n	80019aa <HAL_RCC_OscConfig+0x1b6>
 8001a52:	e05c      	b.n	8001b0e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe febc 	bl	80007d0 <HAL_GetTick>
 8001a58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5c:	e00a      	b.n	8001a74 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a5e:	f7fe feb7 	bl	80007d0 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	; 0x64
 8001a6c:	d902      	bls.n	8001a74 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	f000 bf0d 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 8001a74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a78:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001a80:	fa93 f3a3 	rbit	r3, r3
 8001a84:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001a88:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x2b2>
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aaa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001ac2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_RCC_OscConfig+0x314>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ad6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001ada:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001ade:	fa92 f2a2 	rbit	r2, r2
 8001ae2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001ae6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001aea:	fab2 f282 	clz	r2, r2
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	f042 0220 	orr.w	r2, r2, #32
 8001af4:	b2d2      	uxtb	r2, r2
 8001af6:	f002 021f 	and.w	r2, r2, #31
 8001afa:	2101      	movs	r1, #1
 8001afc:	fa01 f202 	lsl.w	r2, r1, r2
 8001b00:	4013      	ands	r3, r2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ab      	bne.n	8001a5e <HAL_RCC_OscConfig+0x26a>
 8001b06:	e002      	b.n	8001b0e <HAL_RCC_OscConfig+0x31a>
 8001b08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b12:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 817f 	beq.w	8001e22 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b24:	4ba7      	ldr	r3, [pc, #668]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b30:	4ba4      	ldr	r3, [pc, #656]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 030c 	and.w	r3, r3, #12
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d173      	bne.n	8001c24 <HAL_RCC_OscConfig+0x430>
 8001b3c:	4ba1      	ldr	r3, [pc, #644]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001b44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b48:	d16c      	bne.n	8001c24 <HAL_RCC_OscConfig+0x430>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001b54:	fa93 f3a3 	rbit	r3, r3
 8001b58:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001b5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d102      	bne.n	8001b7a <HAL_RCC_OscConfig+0x386>
 8001b74:	4b93      	ldr	r3, [pc, #588]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	e013      	b.n	8001ba2 <HAL_RCC_OscConfig+0x3ae>
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b9e:	4b89      	ldr	r3, [pc, #548]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ba8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001bac:	fa92 f2a2 	rbit	r2, r2
 8001bb0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001bb4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	f002 021f 	and.w	r2, r2, #31
 8001bc8:	2101      	movs	r1, #1
 8001bca:	fa01 f202 	lsl.w	r2, r1, r2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCC_OscConfig+0x3f6>
 8001bd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d002      	beq.n	8001bea <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f000 be52 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bea:	4b76      	ldr	r3, [pc, #472]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	21f8      	movs	r1, #248	; 0xf8
 8001c00:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c04:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001c08:	fa91 f1a1 	rbit	r1, r1
 8001c0c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001c10:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001c14:	fab1 f181 	clz	r1, r1
 8001c18:	b2c9      	uxtb	r1, r1
 8001c1a:	408b      	lsls	r3, r1
 8001c1c:	4969      	ldr	r1, [pc, #420]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c22:	e0fe      	b.n	8001e22 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8088 	beq.w	8001d46 <HAL_RCC_OscConfig+0x552>
 8001c36:	2301      	movs	r3, #1
 8001c38:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001c48:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c56:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	2301      	movs	r3, #1
 8001c60:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c62:	f7fe fdb5 	bl	80007d0 <HAL_GetTick>
 8001c66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6c:	f7fe fdb0 	bl	80007d0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d902      	bls.n	8001c82 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	f000 be06 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c88:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001c8c:	fa93 f3a3 	rbit	r3, r3
 8001c90:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c94:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c98:	fab3 f383 	clz	r3, r3
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	095b      	lsrs	r3, r3, #5
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x4be>
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	e013      	b.n	8001cda <HAL_RCC_OscConfig+0x4e6>
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001cca:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001cce:	fa93 f3a3 	rbit	r3, r3
 8001cd2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	2202      	movs	r2, #2
 8001cdc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001ce0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001ce4:	fa92 f2a2 	rbit	r2, r2
 8001ce8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001cec:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cf0:	fab2 f282 	clz	r2, r2
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	f002 021f 	and.w	r2, r2, #31
 8001d00:	2101      	movs	r1, #1
 8001d02:	fa01 f202 	lsl.w	r2, r1, r2
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0af      	beq.n	8001c6c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	21f8      	movs	r1, #248	; 0xf8
 8001d22:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001d2a:	fa91 f1a1 	rbit	r1, r1
 8001d2e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001d32:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001d36:	fab1 f181 	clz	r1, r1
 8001d3a:	b2c9      	uxtb	r1, r1
 8001d3c:	408b      	lsls	r3, r1
 8001d3e:	4921      	ldr	r1, [pc, #132]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	600b      	str	r3, [r1, #0]
 8001d44:	e06d      	b.n	8001e22 <HAL_RCC_OscConfig+0x62e>
 8001d46:	2301      	movs	r3, #1
 8001d48:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001d58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5c:	fab3 f383 	clz	r3, r3
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d66:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fd2d 	bl	80007d0 <HAL_GetTick>
 8001d76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7a:	e00a      	b.n	8001d92 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7fe fd28 	bl	80007d0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d902      	bls.n	8001d92 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	f000 bd7e 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 8001d92:	2302      	movs	r3, #2
 8001d94:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d98:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d9c:	fa93 f3a3 	rbit	r3, r3
 8001da0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001da4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	095b      	lsrs	r3, r3, #5
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x5d4>
 8001dbc:	4b01      	ldr	r3, [pc, #4]	; (8001dc4 <HAL_RCC_OscConfig+0x5d0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	e016      	b.n	8001df0 <HAL_RCC_OscConfig+0x5fc>
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	2302      	movs	r3, #2
 8001dca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001dd2:	fa93 f3a3 	rbit	r3, r3
 8001dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001dda:	2302      	movs	r3, #2
 8001ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001de0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dec:	4bbf      	ldr	r3, [pc, #764]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2202      	movs	r2, #2
 8001df2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001df6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001dfa:	fa92 f2a2 	rbit	r2, r2
 8001dfe:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001e02:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001e06:	fab2 f282 	clz	r2, r2
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f042 0220 	orr.w	r2, r2, #32
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	f002 021f 	and.w	r2, r2, #31
 8001e16:	2101      	movs	r1, #1
 8001e18:	fa01 f202 	lsl.w	r2, r1, r2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1ac      	bne.n	8001d7c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 8113 	beq.w	800205e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d07c      	beq.n	8001f42 <HAL_RCC_OscConfig+0x74e>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001e52:	fa93 f3a3 	rbit	r3, r3
 8001e56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001e5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4ba2      	ldr	r3, [pc, #648]	; (80020f0 <HAL_RCC_OscConfig+0x8fc>)
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	2301      	movs	r3, #1
 8001e70:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fcad 	bl	80007d0 <HAL_GetTick>
 8001e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7a:	e00a      	b.n	8001e92 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e7c:	f7fe fca8 	bl	80007d0 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	2b02      	cmp	r3, #2
 8001e8a:	d902      	bls.n	8001e92 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	f000 bcfe 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 8001e92:	2302      	movs	r3, #2
 8001e94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fa93 f2a3 	rbit	r2, r3
 8001ec4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ede:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	fa93 f2a3 	rbit	r2, r3
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ef0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef2:	4b7e      	ldr	r3, [pc, #504]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001efa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001efe:	2102      	movs	r1, #2
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	fa93 f1a3 	rbit	r1, r3
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f18:	6019      	str	r1, [r3, #0]
  return result;
 8001f1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	fab3 f383 	clz	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2101      	movs	r1, #1
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d09d      	beq.n	8001e7c <HAL_RCC_OscConfig+0x688>
 8001f40:	e08d      	b.n	800205e <HAL_RCC_OscConfig+0x86a>
 8001f42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	fa93 f2a3 	rbit	r2, r3
 8001f5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f64:	601a      	str	r2, [r3, #0]
  return result;
 8001f66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f6e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f70:	fab3 f383 	clz	r3, r3
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	461a      	mov	r2, r3
 8001f78:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x8fc>)
 8001f7a:	4413      	add	r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2300      	movs	r3, #0
 8001f82:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f84:	f7fe fc24 	bl	80007d0 <HAL_GetTick>
 8001f88:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fc1f 	bl	80007d0 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d902      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	f000 bc75 	b.w	800288e <HAL_RCC_OscConfig+0x109a>
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fac:	2202      	movs	r2, #2
 8001fae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fb4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fc2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	fa93 f2a3 	rbit	r2, r3
 8001fe2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ff0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800200e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b36      	ldr	r3, [pc, #216]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 8002012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002014:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002018:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800201c:	2102      	movs	r1, #2
 800201e:	6019      	str	r1, [r3, #0]
 8002020:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002024:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	fa93 f1a3 	rbit	r1, r3
 800202e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002032:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002036:	6019      	str	r1, [r3, #0]
  return result;
 8002038:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f303 	lsl.w	r3, r1, r3
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d197      	bne.n	8001f8e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800205e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002062:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 81a5 	beq.w	80023be <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800207a:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	4a18      	ldr	r2, [pc, #96]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	61d3      	str	r3, [r2, #28]
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <HAL_RCC_OscConfig+0x8f8>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800209a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ac:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80020ae:	2301      	movs	r3, #1
 80020b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <HAL_RCC_OscConfig+0x900>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d121      	bne.n	8002104 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c0:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <HAL_RCC_OscConfig+0x900>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <HAL_RCC_OscConfig+0x900>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020cc:	f7fe fb80 	bl	80007d0 <HAL_GetTick>
 80020d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e010      	b.n	80020f8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7fe fb7b 	bl	80007d0 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	; 0x64
 80020e4:	d908      	bls.n	80020f8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e3d1      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	10908120 	.word	0x10908120
 80020f4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f8:	4b8d      	ldr	r3, [pc, #564]	; (8002330 <HAL_RCC_OscConfig+0xb3c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0e8      	beq.n	80020d6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002108:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x92e>
 8002114:	4b87      	ldr	r3, [pc, #540]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a86      	ldr	r2, [pc, #536]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e035      	b.n	800218e <HAL_RCC_OscConfig+0x99a>
 8002122:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002126:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d10c      	bne.n	800214c <HAL_RCC_OscConfig+0x958>
 8002132:	4b80      	ldr	r3, [pc, #512]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	4a7f      	ldr	r2, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6213      	str	r3, [r2, #32]
 800213e:	4b7d      	ldr	r3, [pc, #500]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	4a7c      	ldr	r2, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	6213      	str	r3, [r2, #32]
 800214a:	e020      	b.n	800218e <HAL_RCC_OscConfig+0x99a>
 800214c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002150:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x982>
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a74      	ldr	r2, [pc, #464]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	4b72      	ldr	r3, [pc, #456]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	4a71      	ldr	r2, [pc, #452]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6213      	str	r3, [r2, #32]
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x99a>
 8002176:	4b6f      	ldr	r3, [pc, #444]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a6e      	ldr	r2, [pc, #440]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	4b6c      	ldr	r3, [pc, #432]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002184:	6a1b      	ldr	r3, [r3, #32]
 8002186:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800218e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002192:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8081 	beq.w	80022a2 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fb16 	bl	80007d0 <HAL_GetTick>
 80021a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a8:	e00b      	b.n	80021c2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7fe fb11 	bl	80007d0 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e365      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021ca:	2202      	movs	r2, #2
 80021cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021ee:	2202      	movs	r2, #2
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002204:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002208:	601a      	str	r2, [r3, #0]
  return result;
 800220a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220e:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002212:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f043 0302 	orr.w	r3, r3, #2
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d102      	bne.n	800222e <HAL_RCC_OscConfig+0xa3a>
 8002228:	4b42      	ldr	r3, [pc, #264]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	e013      	b.n	8002256 <HAL_RCC_OscConfig+0xa62>
 800222e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002232:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002236:	2202      	movs	r2, #2
 8002238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	4b38      	ldr	r3, [pc, #224]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800225a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800225e:	2102      	movs	r1, #2
 8002260:	6011      	str	r1, [r2, #0]
 8002262:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002266:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	fa92 f1a2 	rbit	r1, r2
 8002270:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002274:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002278:	6011      	str	r1, [r2, #0]
  return result;
 800227a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800227e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	fab2 f282 	clz	r2, r2
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f002 021f 	and.w	r2, r2, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f202 	lsl.w	r2, r1, r2
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d084      	beq.n	80021aa <HAL_RCC_OscConfig+0x9b6>
 80022a0:	e083      	b.n	80023aa <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a2:	f7fe fa95 	bl	80007d0 <HAL_GetTick>
 80022a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ac:	f7fe fa90 	bl	80007d0 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e2e4      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 80022c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022cc:	2202      	movs	r2, #2
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ec:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022f0:	2202      	movs	r2, #2
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002306:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800230a:	601a      	str	r2, [r3, #0]
  return result;
 800230c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002310:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002314:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	095b      	lsrs	r3, r3, #5
 800231e:	b2db      	uxtb	r3, r3
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0xb44>
 800232a:	4b02      	ldr	r3, [pc, #8]	; (8002334 <HAL_RCC_OscConfig+0xb40>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	e017      	b.n	8002360 <HAL_RCC_OscConfig+0xb6c>
 8002330:	40007000 	.word	0x40007000
 8002334:	40021000 	.word	0x40021000
 8002338:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800233c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002340:	2202      	movs	r2, #2
 8002342:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002348:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	fa93 f2a3 	rbit	r2, r3
 8002352:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002356:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4bb3      	ldr	r3, [pc, #716]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002364:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002368:	2102      	movs	r1, #2
 800236a:	6011      	str	r1, [r2, #0]
 800236c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002370:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	fa92 f1a2 	rbit	r1, r2
 800237a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800237e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8002382:	6011      	str	r1, [r2, #0]
  return result;
 8002384:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002388:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800238c:	6812      	ldr	r2, [r2, #0]
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	f002 021f 	and.w	r2, r2, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f202 	lsl.w	r2, r1, r2
 80023a4:	4013      	ands	r3, r2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d180      	bne.n	80022ac <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023aa:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d105      	bne.n	80023be <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b2:	4b9e      	ldr	r3, [pc, #632]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	4a9d      	ldr	r2, [pc, #628]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 80023b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023bc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 825e 	beq.w	800288c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023d0:	4b96      	ldr	r3, [pc, #600]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	f000 821f 	beq.w	800281c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	f040 8170 	bne.w	80026d0 <HAL_RCC_OscConfig+0xedc>
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80023f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002410:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002414:	601a      	str	r2, [r3, #0]
  return result;
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800241e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	fab3 f383 	clz	r3, r3
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800242a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	461a      	mov	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002436:	f7fe f9cb 	bl	80007d0 <HAL_GetTick>
 800243a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	e009      	b.n	8002454 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe f9c6 	bl	80007d0 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e21c      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800245c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002460:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002466:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	fa93 f2a3 	rbit	r2, r3
 8002470:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002474:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002478:	601a      	str	r2, [r3, #0]
  return result;
 800247a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800247e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002482:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	fab3 f383 	clz	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d102      	bne.n	800249e <HAL_RCC_OscConfig+0xcaa>
 8002498:	4b64      	ldr	r3, [pc, #400]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	e027      	b.n	80024ee <HAL_RCC_OscConfig+0xcfa>
 800249e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024a6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	fa93 f2a3 	rbit	r2, r3
 80024ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024be:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	fa93 f2a3 	rbit	r2, r3
 80024e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	4b50      	ldr	r3, [pc, #320]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80024f2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80024f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024fa:	6011      	str	r1, [r2, #0]
 80024fc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002500:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	fa92 f1a2 	rbit	r1, r2
 800250a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800250e:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002512:	6011      	str	r1, [r2, #0]
  return result;
 8002514:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002518:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800251c:	6812      	ldr	r2, [r2, #0]
 800251e:	fab2 f282 	clz	r2, r2
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	f042 0220 	orr.w	r2, r2, #32
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	f002 021f 	and.w	r2, r2, #31
 800252e:	2101      	movs	r1, #1
 8002530:	fa01 f202 	lsl.w	r2, r1, r2
 8002534:	4013      	ands	r3, r2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d182      	bne.n	8002440 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800253a:	4b3c      	ldr	r3, [pc, #240]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	f023 020f 	bic.w	r2, r3, #15
 8002542:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002546:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	4937      	ldr	r1, [pc, #220]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 8002550:	4313      	orrs	r3, r2
 8002552:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800255c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002560:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a19      	ldr	r1, [r3, #32]
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	430b      	orrs	r3, r1
 8002576:	492d      	ldr	r1, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 8002578:	4313      	orrs	r3, r2
 800257a:	604b      	str	r3, [r1, #4]
 800257c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002580:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002584:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800258e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	fa93 f2a3 	rbit	r2, r3
 8002598:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025a0:	601a      	str	r2, [r3, #0]
  return result;
 80025a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80025aa:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	461a      	mov	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c2:	f7fe f905 	bl	80007d0 <HAL_GetTick>
 80025c6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ca:	e009      	b.n	80025e0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025cc:	f7fe f900 	bl	80007d0 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e156      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 80025e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025f2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fa93 f2a3 	rbit	r2, r3
 80025fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002600:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002604:	601a      	str	r2, [r3, #0]
  return result;
 8002606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800260a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800260e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002610:	fab3 f383 	clz	r3, r3
 8002614:	b2db      	uxtb	r3, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b01      	cmp	r3, #1
 8002622:	d105      	bne.n	8002630 <HAL_RCC_OscConfig+0xe3c>
 8002624:	4b01      	ldr	r3, [pc, #4]	; (800262c <HAL_RCC_OscConfig+0xe38>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	e02a      	b.n	8002680 <HAL_RCC_OscConfig+0xe8c>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002638:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002642:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	fa93 f2a3 	rbit	r2, r3
 800264c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002650:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800265e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002668:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	fa93 f2a3 	rbit	r2, r3
 8002672:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002676:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	4b86      	ldr	r3, [pc, #536]	; (8002898 <HAL_RCC_OscConfig+0x10a4>)
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002684:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800268c:	6011      	str	r1, [r2, #0]
 800268e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002692:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	fa92 f1a2 	rbit	r1, r2
 800269c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026a0:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80026a4:	6011      	str	r1, [r2, #0]
  return result;
 80026a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80026aa:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	fab2 f282 	clz	r2, r2
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	f042 0220 	orr.w	r2, r2, #32
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	f002 021f 	and.w	r2, r2, #31
 80026c0:	2101      	movs	r1, #1
 80026c2:	fa01 f202 	lsl.w	r2, r1, r2
 80026c6:	4013      	ands	r3, r2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f43f af7f 	beq.w	80025cc <HAL_RCC_OscConfig+0xdd8>
 80026ce:	e0dd      	b.n	800288c <HAL_RCC_OscConfig+0x1098>
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026f0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026f4:	601a      	str	r2, [r3, #0]
  return result;
 80026f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fa:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80026fe:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	fab3 f383 	clz	r3, r3
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800270a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	461a      	mov	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe f85b 	bl	80007d0 <HAL_GetTick>
 800271a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800271e:	e009      	b.n	8002734 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002720:	f7fe f856 	bl	80007d0 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e0ac      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
 8002734:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002738:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800273c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002746:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002754:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002758:	601a      	str	r2, [r3, #0]
  return result;
 800275a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800275e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002762:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b01      	cmp	r3, #1
 8002776:	d102      	bne.n	800277e <HAL_RCC_OscConfig+0xf8a>
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <HAL_RCC_OscConfig+0x10a4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	e027      	b.n	80027ce <HAL_RCC_OscConfig+0xfda>
 800277e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002782:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002786:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800278a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fa93 f2a3 	rbit	r2, r3
 800279a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800279e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fa93 f2a3 	rbit	r2, r3
 80027c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	4b33      	ldr	r3, [pc, #204]	; (8002898 <HAL_RCC_OscConfig+0x10a4>)
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027d2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80027da:	6011      	str	r1, [r2, #0]
 80027dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027e0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	fa92 f1a2 	rbit	r1, r2
 80027ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027ee:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80027f2:	6011      	str	r1, [r2, #0]
  return result;
 80027f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80027f8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	fab2 f282 	clz	r2, r2
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	f042 0220 	orr.w	r2, r2, #32
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	f002 021f 	and.w	r2, r2, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d182      	bne.n	8002720 <HAL_RCC_OscConfig+0xf2c>
 800281a:	e037      	b.n	800288c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800281c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002820:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e02e      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <HAL_RCC_OscConfig+0x10a4>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002838:	4b17      	ldr	r3, [pc, #92]	; (8002898 <HAL_RCC_OscConfig+0x10a4>)
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002840:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002844:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002848:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800284c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	429a      	cmp	r2, r3
 8002856:	d117      	bne.n	8002888 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002858:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800285c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002860:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002864:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800286c:	429a      	cmp	r2, r3
 800286e:	d10b      	bne.n	8002888 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002870:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800287c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b09e      	sub	sp, #120	; 0x78
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e162      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d910      	bls.n	80028e4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 0207 	bic.w	r2, r3, #7
 80028ca:	498b      	ldr	r1, [pc, #556]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b89      	ldr	r3, [pc, #548]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d001      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e14a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f0:	4b82      	ldr	r3, [pc, #520]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	497f      	ldr	r1, [pc, #508]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80dc 	beq.w	8002ac8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d13c      	bne.n	8002992 <HAL_RCC_ClockConfig+0xf6>
 8002918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800291c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002920:	fa93 f3a3 	rbit	r3, r3
 8002924:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002926:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002928:	fab3 f383 	clz	r3, r3
 800292c:	b2db      	uxtb	r3, r3
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	b2db      	uxtb	r3, r3
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <HAL_RCC_ClockConfig+0xa6>
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	e00f      	b.n	8002962 <HAL_RCC_ClockConfig+0xc6>
 8002942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002946:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800294a:	fa93 f3a3 	rbit	r3, r3
 800294e:	667b      	str	r3, [r7, #100]	; 0x64
 8002950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002954:	663b      	str	r3, [r7, #96]	; 0x60
 8002956:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800295e:	4b67      	ldr	r3, [pc, #412]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002966:	65ba      	str	r2, [r7, #88]	; 0x58
 8002968:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800296a:	fa92 f2a2 	rbit	r2, r2
 800296e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002972:	fab2 f282 	clz	r2, r2
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	f042 0220 	orr.w	r2, r2, #32
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	f002 021f 	and.w	r2, r2, #31
 8002982:	2101      	movs	r1, #1
 8002984:	fa01 f202 	lsl.w	r2, r1, r2
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d17b      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e0f3      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d13c      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x178>
 800299a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	fab3 f383 	clz	r3, r3
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	095b      	lsrs	r3, r3, #5
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d102      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x128>
 80029be:	4b4f      	ldr	r3, [pc, #316]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	e00f      	b.n	80029e4 <HAL_RCC_ClockConfig+0x148>
 80029c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029cc:	fa93 f3a3 	rbit	r3, r3
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
 80029d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d6:	643b      	str	r3, [r7, #64]	; 0x40
 80029d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029e8:	63ba      	str	r2, [r7, #56]	; 0x38
 80029ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ec:	fa92 f2a2 	rbit	r2, r2
 80029f0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80029f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f4:	fab2 f282 	clz	r2, r2
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	f042 0220 	orr.w	r2, r2, #32
 80029fe:	b2d2      	uxtb	r2, r2
 8002a00:	f002 021f 	and.w	r2, r2, #31
 8002a04:	2101      	movs	r1, #1
 8002a06:	fa01 f202 	lsl.w	r2, r1, r2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d13a      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0b2      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
 8002a14:	2302      	movs	r3, #2
 8002a16:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x1a0>
 8002a36:	4b31      	ldr	r3, [pc, #196]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	e00d      	b.n	8002a58 <HAL_RCC_ClockConfig+0x1bc>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	2302      	movs	r3, #2
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	4b29      	ldr	r3, [pc, #164]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	2202      	movs	r2, #2
 8002a5a:	61ba      	str	r2, [r7, #24]
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	fa92 f2a2 	rbit	r2, r2
 8002a62:	617a      	str	r2, [r7, #20]
  return result;
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	fab2 f282 	clz	r2, r2
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	f042 0220 	orr.w	r2, r2, #32
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	f002 021f 	and.w	r2, r2, #31
 8002a76:	2101      	movs	r1, #1
 8002a78:	fa01 f202 	lsl.w	r2, r1, r2
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e079      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	491a      	ldr	r1, [pc, #104]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fd fe9a 	bl	80007d0 <HAL_GetTick>
 8002a9c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fd fe96 	bl	80007d0 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e061      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_RCC_ClockConfig+0x260>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d214      	bcs.n	8002b00 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4906      	ldr	r1, [pc, #24]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b04      	ldr	r3, [pc, #16]	; (8002af8 <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e040      	b.n	8002b7a <HAL_RCC_ClockConfig+0x2de>
 8002af8:	40022000 	.word	0x40022000
 8002afc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0304 	and.w	r3, r3, #4
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <HAL_RCC_ClockConfig+0x2e8>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	491a      	ldr	r1, [pc, #104]	; (8002b84 <HAL_RCC_ClockConfig+0x2e8>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_RCC_ClockConfig+0x2e8>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	4912      	ldr	r1, [pc, #72]	; (8002b84 <HAL_RCC_ClockConfig+0x2e8>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b3e:	f000 f829 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b42:	4601      	mov	r1, r0
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <HAL_RCC_ClockConfig+0x2e8>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4c:	22f0      	movs	r2, #240	; 0xf0
 8002b4e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	fa92 f2a2 	rbit	r2, r2
 8002b56:	60fa      	str	r2, [r7, #12]
  return result;
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	fab2 f282 	clz	r2, r2
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	40d3      	lsrs	r3, r2
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x2ec>)
 8002b64:	5cd3      	ldrb	r3, [r2, r3]
 8002b66:	fa21 f303 	lsr.w	r3, r1, r3
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_RCC_ClockConfig+0x2f0>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_RCC_ClockConfig+0x2f4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fde8 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3778      	adds	r7, #120	; 0x78
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	0800395c 	.word	0x0800395c
 8002b8c:	20000000 	.word	0x20000000
 8002b90:	20000004 	.word	0x20000004

08002b94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b08b      	sub	sp, #44	; 0x2c
 8002b98:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	61fb      	str	r3, [r7, #28]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bae:	4b2a      	ldr	r3, [pc, #168]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d002      	beq.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bbe:	2b08      	cmp	r3, #8
 8002bc0:	d003      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x36>
 8002bc2:	e03f      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bc4:	4b25      	ldr	r3, [pc, #148]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bc6:	623b      	str	r3, [r7, #32]
      break;
 8002bc8:	e03f      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bd0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bd4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	fa92 f2a2 	rbit	r2, r2
 8002bdc:	607a      	str	r2, [r7, #4]
  return result;
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fab2 f282 	clz	r2, r2
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	40d3      	lsrs	r3, r2
 8002be8:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	220f      	movs	r2, #15
 8002bf8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	fa92 f2a2 	rbit	r2, r2
 8002c00:	60fa      	str	r2, [r7, #12]
  return result;
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	fab2 f282 	clz	r2, r2
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	40d3      	lsrs	r3, r2
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c1c:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c2c:	e007      	b.n	8002c3e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c2e:	4a0b      	ldr	r2, [pc, #44]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	fb02 f303 	mul.w	r3, r2, r3
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c40:	623b      	str	r3, [r7, #32]
      break;
 8002c42:	e002      	b.n	8002c4a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c46:	623b      	str	r3, [r7, #32]
      break;
 8002c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	372c      	adds	r7, #44	; 0x2c
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	007a1200 	.word	0x007a1200
 8002c60:	08003974 	.word	0x08003974
 8002c64:	08003984 	.word	0x08003984

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c6c:	4b03      	ldr	r3, [pc, #12]	; (8002c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000000 	.word	0x20000000

08002c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c86:	f7ff ffef 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c8a:	4601      	mov	r1, r0
 8002c8c:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c98:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	603a      	str	r2, [r7, #0]
  return result;
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	fab2 f282 	clz	r2, r2
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	40d3      	lsrs	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cae:	5cd3      	ldrb	r3, [r2, r3]
 8002cb0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	0800396c 	.word	0x0800396c

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cca:	f7ff ffcd 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002cce:	4601      	mov	r1, r0
 8002cd0:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cd8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	fa92 f2a2 	rbit	r2, r2
 8002ce4:	603a      	str	r2, [r7, #0]
  return result;
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	fab2 f282 	clz	r2, r2
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	40d3      	lsrs	r3, r2
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	0800396c 	.word	0x0800396c

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b092      	sub	sp, #72	; 0x48
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80d4 	beq.w	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2c:	4b4e      	ldr	r3, [pc, #312]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10e      	bne.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b4b      	ldr	r3, [pc, #300]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	4a4a      	ldr	r2, [pc, #296]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d42:	61d3      	str	r3, [r2, #28]
 8002d44:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d118      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b42      	ldr	r3, [pc, #264]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a41      	ldr	r2, [pc, #260]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d6e:	f7fd fd2f 	bl	80007d0 <HAL_GetTick>
 8002d72:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d74:	e008      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fd fd2b 	bl	80007d0 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b64      	cmp	r3, #100	; 0x64
 8002d82:	d901      	bls.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1d6      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d94:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8084 	beq.w	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d07c      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002db4:	4b2c      	ldr	r3, [pc, #176]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	6a1b      	ldr	r3, [r3, #32]
 8002db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2301      	movs	r3, #1
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002de6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002df0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002df2:	fab3 f383 	clz	r3, r3
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002dfc:	4413      	add	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d04b      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e16:	f7fd fcdb 	bl	80007d0 <HAL_GetTick>
 8002e1a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fd fcd7 	bl	80007d0 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e180      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e34:	2302      	movs	r3, #2
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3a:	fa93 f3a3 	rbit	r3, r3
 8002e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e40:	2302      	movs	r3, #2
 8002e42:	623b      	str	r3, [r7, #32]
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	61fb      	str	r3, [r7, #28]
  return result;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4e:	fab3 f383 	clz	r3, r3
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	095b      	lsrs	r3, r3, #5
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f043 0302 	orr.w	r3, r3, #2
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d108      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e62:	4b01      	ldr	r3, [pc, #4]	; (8002e68 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	e00d      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	40007000 	.word	0x40007000
 8002e70:	10908100 	.word	0x10908100
 8002e74:	2302      	movs	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa93 f3a3 	rbit	r3, r3
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	4b9a      	ldr	r3, [pc, #616]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2202      	movs	r2, #2
 8002e86:	613a      	str	r2, [r7, #16]
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	fa92 f2a2 	rbit	r2, r2
 8002e8e:	60fa      	str	r2, [r7, #12]
  return result;
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	fab2 f282 	clz	r2, r2
 8002e96:	b2d2      	uxtb	r2, r2
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	f002 021f 	and.w	r2, r2, #31
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0b7      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002eae:	4b8f      	ldr	r3, [pc, #572]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb0:	6a1b      	ldr	r3, [r3, #32]
 8002eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	498c      	ldr	r1, [pc, #560]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ec0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ec8:	4b88      	ldr	r3, [pc, #544]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	4a87      	ldr	r2, [pc, #540]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f023 0203 	bic.w	r2, r3, #3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	497f      	ldr	r1, [pc, #508]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002efe:	4b7b      	ldr	r3, [pc, #492]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	4978      	ldr	r1, [pc, #480]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f1c:	4b73      	ldr	r3, [pc, #460]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4970      	ldr	r1, [pc, #448]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0320 	and.w	r3, r3, #32
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f3a:	4b6c      	ldr	r3, [pc, #432]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f023 0210 	bic.w	r2, r3, #16
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	4969      	ldr	r1, [pc, #420]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f58:	4b64      	ldr	r3, [pc, #400]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f64:	4961      	ldr	r1, [pc, #388]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f76:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	f023 0220 	bic.w	r2, r3, #32
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	495a      	ldr	r1, [pc, #360]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f94:	4b55      	ldr	r3, [pc, #340]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	4952      	ldr	r1, [pc, #328]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0308 	and.w	r3, r3, #8
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d008      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fb2:	4b4e      	ldr	r3, [pc, #312]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	494b      	ldr	r1, [pc, #300]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0310 	and.w	r3, r3, #16
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d008      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002fd0:	4b46      	ldr	r3, [pc, #280]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4943      	ldr	r1, [pc, #268]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fee:	4b3f      	ldr	r3, [pc, #252]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	493c      	ldr	r1, [pc, #240]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800300c:	4b37      	ldr	r3, [pc, #220]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800300e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003010:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003018:	4934      	ldr	r1, [pc, #208]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301a:	4313      	orrs	r3, r2
 800301c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800302c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003036:	492d      	ldr	r1, [pc, #180]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003038:	4313      	orrs	r3, r2
 800303a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003048:	4b28      	ldr	r3, [pc, #160]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003054:	4925      	ldr	r1, [pc, #148]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003066:	4b21      	ldr	r3, [pc, #132]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	491e      	ldr	r1, [pc, #120]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003084:	4b19      	ldr	r3, [pc, #100]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	4916      	ldr	r1, [pc, #88]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d008      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030a2:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	490f      	ldr	r1, [pc, #60]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030c0:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	4907      	ldr	r1, [pc, #28]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80030e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e002      	b.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f2:	4913      	ldr	r1, [pc, #76]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003110:	490b      	ldr	r1, [pc, #44]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003112:	4313      	orrs	r3, r2
 8003114:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003130:	4313      	orrs	r3, r2
 8003132:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3748      	adds	r7, #72	; 0x48
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e040      	b.n	80031d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd fa30 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f82c 	bl	80031e0 <UART_SetConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e022      	b.n	80031d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f9f6 	bl	800358c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 fa7d 	bl	80036d0 <UART_CheckIdleState>
 80031d6:	4603      	mov	r3, r0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b92      	ldr	r3, [pc, #584]	; (8003454 <UART_SetConfig+0x274>)
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6812      	ldr	r2, [r2, #0]
 8003212:	6979      	ldr	r1, [r7, #20]
 8003214:	430b      	orrs	r3, r1
 8003216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a80      	ldr	r2, [pc, #512]	; (8003458 <UART_SetConfig+0x278>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d120      	bne.n	800329e <UART_SetConfig+0xbe>
 800325c:	4b7f      	ldr	r3, [pc, #508]	; (800345c <UART_SetConfig+0x27c>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	f003 0303 	and.w	r3, r3, #3
 8003264:	2b03      	cmp	r3, #3
 8003266:	d817      	bhi.n	8003298 <UART_SetConfig+0xb8>
 8003268:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <UART_SetConfig+0x90>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	08003281 	.word	0x08003281
 8003274:	0800328d 	.word	0x0800328d
 8003278:	08003293 	.word	0x08003293
 800327c:	08003287 	.word	0x08003287
 8003280:	2301      	movs	r3, #1
 8003282:	77fb      	strb	r3, [r7, #31]
 8003284:	e0b5      	b.n	80033f2 <UART_SetConfig+0x212>
 8003286:	2302      	movs	r3, #2
 8003288:	77fb      	strb	r3, [r7, #31]
 800328a:	e0b2      	b.n	80033f2 <UART_SetConfig+0x212>
 800328c:	2304      	movs	r3, #4
 800328e:	77fb      	strb	r3, [r7, #31]
 8003290:	e0af      	b.n	80033f2 <UART_SetConfig+0x212>
 8003292:	2308      	movs	r3, #8
 8003294:	77fb      	strb	r3, [r7, #31]
 8003296:	e0ac      	b.n	80033f2 <UART_SetConfig+0x212>
 8003298:	2310      	movs	r3, #16
 800329a:	77fb      	strb	r3, [r7, #31]
 800329c:	e0a9      	b.n	80033f2 <UART_SetConfig+0x212>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6f      	ldr	r2, [pc, #444]	; (8003460 <UART_SetConfig+0x280>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d124      	bne.n	80032f2 <UART_SetConfig+0x112>
 80032a8:	4b6c      	ldr	r3, [pc, #432]	; (800345c <UART_SetConfig+0x27c>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032b0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b4:	d011      	beq.n	80032da <UART_SetConfig+0xfa>
 80032b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032ba:	d817      	bhi.n	80032ec <UART_SetConfig+0x10c>
 80032bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c0:	d011      	beq.n	80032e6 <UART_SetConfig+0x106>
 80032c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032c6:	d811      	bhi.n	80032ec <UART_SetConfig+0x10c>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <UART_SetConfig+0xf4>
 80032cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d0:	d006      	beq.n	80032e0 <UART_SetConfig+0x100>
 80032d2:	e00b      	b.n	80032ec <UART_SetConfig+0x10c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
 80032d8:	e08b      	b.n	80033f2 <UART_SetConfig+0x212>
 80032da:	2302      	movs	r3, #2
 80032dc:	77fb      	strb	r3, [r7, #31]
 80032de:	e088      	b.n	80033f2 <UART_SetConfig+0x212>
 80032e0:	2304      	movs	r3, #4
 80032e2:	77fb      	strb	r3, [r7, #31]
 80032e4:	e085      	b.n	80033f2 <UART_SetConfig+0x212>
 80032e6:	2308      	movs	r3, #8
 80032e8:	77fb      	strb	r3, [r7, #31]
 80032ea:	e082      	b.n	80033f2 <UART_SetConfig+0x212>
 80032ec:	2310      	movs	r3, #16
 80032ee:	77fb      	strb	r3, [r7, #31]
 80032f0:	e07f      	b.n	80033f2 <UART_SetConfig+0x212>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a5b      	ldr	r2, [pc, #364]	; (8003464 <UART_SetConfig+0x284>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d124      	bne.n	8003346 <UART_SetConfig+0x166>
 80032fc:	4b57      	ldr	r3, [pc, #348]	; (800345c <UART_SetConfig+0x27c>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003304:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003308:	d011      	beq.n	800332e <UART_SetConfig+0x14e>
 800330a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800330e:	d817      	bhi.n	8003340 <UART_SetConfig+0x160>
 8003310:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003314:	d011      	beq.n	800333a <UART_SetConfig+0x15a>
 8003316:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800331a:	d811      	bhi.n	8003340 <UART_SetConfig+0x160>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <UART_SetConfig+0x148>
 8003320:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003324:	d006      	beq.n	8003334 <UART_SetConfig+0x154>
 8003326:	e00b      	b.n	8003340 <UART_SetConfig+0x160>
 8003328:	2300      	movs	r3, #0
 800332a:	77fb      	strb	r3, [r7, #31]
 800332c:	e061      	b.n	80033f2 <UART_SetConfig+0x212>
 800332e:	2302      	movs	r3, #2
 8003330:	77fb      	strb	r3, [r7, #31]
 8003332:	e05e      	b.n	80033f2 <UART_SetConfig+0x212>
 8003334:	2304      	movs	r3, #4
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e05b      	b.n	80033f2 <UART_SetConfig+0x212>
 800333a:	2308      	movs	r3, #8
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	e058      	b.n	80033f2 <UART_SetConfig+0x212>
 8003340:	2310      	movs	r3, #16
 8003342:	77fb      	strb	r3, [r7, #31]
 8003344:	e055      	b.n	80033f2 <UART_SetConfig+0x212>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a47      	ldr	r2, [pc, #284]	; (8003468 <UART_SetConfig+0x288>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d124      	bne.n	800339a <UART_SetConfig+0x1ba>
 8003350:	4b42      	ldr	r3, [pc, #264]	; (800345c <UART_SetConfig+0x27c>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003358:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800335c:	d011      	beq.n	8003382 <UART_SetConfig+0x1a2>
 800335e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003362:	d817      	bhi.n	8003394 <UART_SetConfig+0x1b4>
 8003364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003368:	d011      	beq.n	800338e <UART_SetConfig+0x1ae>
 800336a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800336e:	d811      	bhi.n	8003394 <UART_SetConfig+0x1b4>
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <UART_SetConfig+0x19c>
 8003374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003378:	d006      	beq.n	8003388 <UART_SetConfig+0x1a8>
 800337a:	e00b      	b.n	8003394 <UART_SetConfig+0x1b4>
 800337c:	2300      	movs	r3, #0
 800337e:	77fb      	strb	r3, [r7, #31]
 8003380:	e037      	b.n	80033f2 <UART_SetConfig+0x212>
 8003382:	2302      	movs	r3, #2
 8003384:	77fb      	strb	r3, [r7, #31]
 8003386:	e034      	b.n	80033f2 <UART_SetConfig+0x212>
 8003388:	2304      	movs	r3, #4
 800338a:	77fb      	strb	r3, [r7, #31]
 800338c:	e031      	b.n	80033f2 <UART_SetConfig+0x212>
 800338e:	2308      	movs	r3, #8
 8003390:	77fb      	strb	r3, [r7, #31]
 8003392:	e02e      	b.n	80033f2 <UART_SetConfig+0x212>
 8003394:	2310      	movs	r3, #16
 8003396:	77fb      	strb	r3, [r7, #31]
 8003398:	e02b      	b.n	80033f2 <UART_SetConfig+0x212>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a33      	ldr	r2, [pc, #204]	; (800346c <UART_SetConfig+0x28c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d124      	bne.n	80033ee <UART_SetConfig+0x20e>
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <UART_SetConfig+0x27c>)
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80033ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033b0:	d011      	beq.n	80033d6 <UART_SetConfig+0x1f6>
 80033b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033b6:	d817      	bhi.n	80033e8 <UART_SetConfig+0x208>
 80033b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033bc:	d011      	beq.n	80033e2 <UART_SetConfig+0x202>
 80033be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033c2:	d811      	bhi.n	80033e8 <UART_SetConfig+0x208>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <UART_SetConfig+0x1f0>
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d006      	beq.n	80033dc <UART_SetConfig+0x1fc>
 80033ce:	e00b      	b.n	80033e8 <UART_SetConfig+0x208>
 80033d0:	2300      	movs	r3, #0
 80033d2:	77fb      	strb	r3, [r7, #31]
 80033d4:	e00d      	b.n	80033f2 <UART_SetConfig+0x212>
 80033d6:	2302      	movs	r3, #2
 80033d8:	77fb      	strb	r3, [r7, #31]
 80033da:	e00a      	b.n	80033f2 <UART_SetConfig+0x212>
 80033dc:	2304      	movs	r3, #4
 80033de:	77fb      	strb	r3, [r7, #31]
 80033e0:	e007      	b.n	80033f2 <UART_SetConfig+0x212>
 80033e2:	2308      	movs	r3, #8
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	e004      	b.n	80033f2 <UART_SetConfig+0x212>
 80033e8:	2310      	movs	r3, #16
 80033ea:	77fb      	strb	r3, [r7, #31]
 80033ec:	e001      	b.n	80033f2 <UART_SetConfig+0x212>
 80033ee:	2310      	movs	r3, #16
 80033f0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	d16c      	bne.n	80034d6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d838      	bhi.n	8003474 <UART_SetConfig+0x294>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <UART_SetConfig+0x228>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800342d 	.word	0x0800342d
 800340c:	08003435 	.word	0x08003435
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003475 	.word	0x08003475
 8003418:	08003443 	.word	0x08003443
 800341c:	08003475 	.word	0x08003475
 8003420:	08003475 	.word	0x08003475
 8003424:	08003475 	.word	0x08003475
 8003428:	0800344b 	.word	0x0800344b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800342c:	f7ff fc28 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 8003430:	61b8      	str	r0, [r7, #24]
        break;
 8003432:	e024      	b.n	800347e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7ff fc46 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8003438:	61b8      	str	r0, [r7, #24]
        break;
 800343a:	e020      	b.n	800347e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <UART_SetConfig+0x290>)
 800343e:	61bb      	str	r3, [r7, #24]
        break;
 8003440:	e01d      	b.n	800347e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003442:	f7ff fba7 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8003446:	61b8      	str	r0, [r7, #24]
        break;
 8003448:	e019      	b.n	800347e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344e:	61bb      	str	r3, [r7, #24]
        break;
 8003450:	e015      	b.n	800347e <UART_SetConfig+0x29e>
 8003452:	bf00      	nop
 8003454:	efff69f3 	.word	0xefff69f3
 8003458:	40013800 	.word	0x40013800
 800345c:	40021000 	.word	0x40021000
 8003460:	40004400 	.word	0x40004400
 8003464:	40004800 	.word	0x40004800
 8003468:	40004c00 	.word	0x40004c00
 800346c:	40005000 	.word	0x40005000
 8003470:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	77bb      	strb	r3, [r7, #30]
        break;
 800347c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d075      	beq.n	8003570 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	005a      	lsls	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	441a      	add	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	fbb2 f3f3 	udiv	r3, r2, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	2b0f      	cmp	r3, #15
 80034a0:	d916      	bls.n	80034d0 <UART_SetConfig+0x2f0>
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034a8:	d212      	bcs.n	80034d0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	f023 030f 	bic.w	r3, r3, #15
 80034b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	085b      	lsrs	r3, r3, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	b29a      	uxth	r2, r3
 80034c0:	89fb      	ldrh	r3, [r7, #14]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	89fa      	ldrh	r2, [r7, #14]
 80034cc:	60da      	str	r2, [r3, #12]
 80034ce:	e04f      	b.n	8003570 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	77bb      	strb	r3, [r7, #30]
 80034d4:	e04c      	b.n	8003570 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d828      	bhi.n	800352e <UART_SetConfig+0x34e>
 80034dc:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <UART_SetConfig+0x304>)
 80034de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e2:	bf00      	nop
 80034e4:	08003509 	.word	0x08003509
 80034e8:	08003511 	.word	0x08003511
 80034ec:	08003519 	.word	0x08003519
 80034f0:	0800352f 	.word	0x0800352f
 80034f4:	0800351f 	.word	0x0800351f
 80034f8:	0800352f 	.word	0x0800352f
 80034fc:	0800352f 	.word	0x0800352f
 8003500:	0800352f 	.word	0x0800352f
 8003504:	08003527 	.word	0x08003527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7ff fbba 	bl	8002c80 <HAL_RCC_GetPCLK1Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e013      	b.n	8003538 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7ff fbd8 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 8003514:	61b8      	str	r0, [r7, #24]
        break;
 8003516:	e00f      	b.n	8003538 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003518:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <UART_SetConfig+0x3a8>)
 800351a:	61bb      	str	r3, [r7, #24]
        break;
 800351c:	e00c      	b.n	8003538 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800351e:	f7ff fb39 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8003522:	61b8      	str	r0, [r7, #24]
        break;
 8003524:	e008      	b.n	8003538 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	61bb      	str	r3, [r7, #24]
        break;
 800352c:	e004      	b.n	8003538 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	77bb      	strb	r3, [r7, #30]
        break;
 8003536:	bf00      	nop
    }

    if (pclk != 0U)
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d018      	beq.n	8003570 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085a      	lsrs	r2, r3, #1
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	441a      	add	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	b29b      	uxth	r3, r3
 8003552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b0f      	cmp	r3, #15
 8003558:	d908      	bls.n	800356c <UART_SetConfig+0x38c>
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003560:	d204      	bcs.n	800356c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	60da      	str	r2, [r3, #12]
 800356a:	e001      	b.n	8003570 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800357c:	7fbb      	ldrb	r3, [r7, #30]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3720      	adds	r7, #32
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	007a1200 	.word	0x007a1200

0800358c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368a:	d10a      	bne.n	80036a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036e0:	f7fd f876 	bl	80007d0 <HAL_GetTick>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d10e      	bne.n	8003712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f82d 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e023      	b.n	800375a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	2b04      	cmp	r3, #4
 800371e:	d10e      	bne.n	800373e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f817 	bl	8003762 <UART_WaitOnFlagUntilTimeout>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e00d      	b.n	800375a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2220      	movs	r2, #32
 8003748:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b09c      	sub	sp, #112	; 0x70
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003772:	e0a5      	b.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003774:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377a:	f000 80a1 	beq.w	80038c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377e:	f7fd f827 	bl	80007d0 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800378a:	429a      	cmp	r2, r3
 800378c:	d302      	bcc.n	8003794 <UART_WaitOnFlagUntilTimeout+0x32>
 800378e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003790:	2b00      	cmp	r3, #0
 8003792:	d13e      	bne.n	8003812 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a8:	667b      	str	r3, [r7, #100]	; 0x64
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e6      	bne.n	8003794 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	663b      	str	r3, [r7, #96]	; 0x60
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3308      	adds	r3, #8
 80037e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2220      	movs	r2, #32
 80037fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e067      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d04f      	beq.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800382a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382e:	d147      	bne.n	80038c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003838:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	e853 3f00 	ldrex	r3, [r3]
 8003846:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800384e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
 800385a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800385e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003860:	e841 2300 	strex	r3, r2, [r1]
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1e6      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3308      	adds	r3, #8
 8003872:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	e853 3f00 	ldrex	r3, [r3]
 800387a:	613b      	str	r3, [r7, #16]
   return(result);
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	66bb      	str	r3, [r7, #104]	; 0x68
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3308      	adds	r3, #8
 800388a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800388c:	623a      	str	r2, [r7, #32]
 800388e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	69f9      	ldr	r1, [r7, #28]
 8003892:	6a3a      	ldr	r2, [r7, #32]
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	61bb      	str	r3, [r7, #24]
   return(result);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e5      	bne.n	800386c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e010      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69da      	ldr	r2, [r3, #28]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	4013      	ands	r3, r2
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	bf0c      	ite	eq
 80038d0:	2301      	moveq	r3, #1
 80038d2:	2300      	movne	r3, #0
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	79fb      	ldrb	r3, [r7, #7]
 80038da:	429a      	cmp	r2, r3
 80038dc:	f43f af4a 	beq.w	8003774 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3770      	adds	r7, #112	; 0x70
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <__libc_init_array>:
 80038ec:	b570      	push	{r4, r5, r6, lr}
 80038ee:	4d0d      	ldr	r5, [pc, #52]	; (8003924 <__libc_init_array+0x38>)
 80038f0:	4c0d      	ldr	r4, [pc, #52]	; (8003928 <__libc_init_array+0x3c>)
 80038f2:	1b64      	subs	r4, r4, r5
 80038f4:	10a4      	asrs	r4, r4, #2
 80038f6:	2600      	movs	r6, #0
 80038f8:	42a6      	cmp	r6, r4
 80038fa:	d109      	bne.n	8003910 <__libc_init_array+0x24>
 80038fc:	4d0b      	ldr	r5, [pc, #44]	; (800392c <__libc_init_array+0x40>)
 80038fe:	4c0c      	ldr	r4, [pc, #48]	; (8003930 <__libc_init_array+0x44>)
 8003900:	f000 f820 	bl	8003944 <_init>
 8003904:	1b64      	subs	r4, r4, r5
 8003906:	10a4      	asrs	r4, r4, #2
 8003908:	2600      	movs	r6, #0
 800390a:	42a6      	cmp	r6, r4
 800390c:	d105      	bne.n	800391a <__libc_init_array+0x2e>
 800390e:	bd70      	pop	{r4, r5, r6, pc}
 8003910:	f855 3b04 	ldr.w	r3, [r5], #4
 8003914:	4798      	blx	r3
 8003916:	3601      	adds	r6, #1
 8003918:	e7ee      	b.n	80038f8 <__libc_init_array+0xc>
 800391a:	f855 3b04 	ldr.w	r3, [r5], #4
 800391e:	4798      	blx	r3
 8003920:	3601      	adds	r6, #1
 8003922:	e7f2      	b.n	800390a <__libc_init_array+0x1e>
 8003924:	08003994 	.word	0x08003994
 8003928:	08003994 	.word	0x08003994
 800392c:	08003994 	.word	0x08003994
 8003930:	08003998 	.word	0x08003998

08003934 <memset>:
 8003934:	4402      	add	r2, r0
 8003936:	4603      	mov	r3, r0
 8003938:	4293      	cmp	r3, r2
 800393a:	d100      	bne.n	800393e <memset+0xa>
 800393c:	4770      	bx	lr
 800393e:	f803 1b01 	strb.w	r1, [r3], #1
 8003942:	e7f9      	b.n	8003938 <memset+0x4>

08003944 <_init>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	bf00      	nop
 8003948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800394a:	bc08      	pop	{r3}
 800394c:	469e      	mov	lr, r3
 800394e:	4770      	bx	lr

08003950 <_fini>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	bf00      	nop
 8003954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003956:	bc08      	pop	{r3}
 8003958:	469e      	mov	lr, r3
 800395a:	4770      	bx	lr
